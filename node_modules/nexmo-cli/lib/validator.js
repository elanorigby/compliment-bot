'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Validator = function () {
  function Validator(emitter) {
    _classCallCheck(this, Validator);

    this.emitter = emitter;
  }

  _createClass(Validator, [{
    key: 'response',
    value: function response(error, _response) {
      this.debug(error, _response);

      if (error && error.message) {
        this.emitter.error(error.message);
      } else if (error && error.body && error.body['error-code']) {
        this.emitter.error(error.body['error-code-label']);
      } else if (_response && _response['error-code'] && _response['error-code'] !== '200') {
        this.emitter.error(_response['error-code-label']);
      } else if (_response && _response['status'] && _response['status'] !== '0') {
        this.emitter.error(_response['status_message']);
      }
    }
  }, {
    key: 'debug',
    value: function debug(error, response) {
      this.emitter.debugger('Validator.response() - Error: ');
      this.emitter.debugger(error);
      this.emitter.debugger('Validator.response() - Response: ');
      this.emitter.debugger(response);
      this.emitter.debugger('End Validator.response()');
    }
  }]);

  return Validator;
}();

exports.default = Validator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92YWxpZGF0b3IuanMiXSwibmFtZXMiOlsiVmFsaWRhdG9yIiwiZW1pdHRlciIsImVycm9yIiwicmVzcG9uc2UiLCJkZWJ1ZyIsIm1lc3NhZ2UiLCJib2R5IiwiZGVidWdnZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBTUEsUztBQUNKLHFCQUFZQyxPQUFaLEVBQXFCO0FBQUE7O0FBQ25CLFNBQUtBLE9BQUwsR0FBZUEsT0FBZjtBQUNEOzs7OzZCQUVRQyxLLEVBQU9DLFMsRUFBVTtBQUN4QixXQUFLQyxLQUFMLENBQVdGLEtBQVgsRUFBa0JDLFNBQWxCOztBQUVBLFVBQUlELFNBQVNBLE1BQU1HLE9BQW5CLEVBQTRCO0FBQzFCLGFBQUtKLE9BQUwsQ0FBYUMsS0FBYixDQUFtQkEsTUFBTUcsT0FBekI7QUFDRCxPQUZELE1BRU8sSUFBSUgsU0FBU0EsTUFBTUksSUFBZixJQUF1QkosTUFBTUksSUFBTixDQUFXLFlBQVgsQ0FBM0IsRUFBcUQ7QUFDMUQsYUFBS0wsT0FBTCxDQUFhQyxLQUFiLENBQW1CQSxNQUFNSSxJQUFOLENBQVcsa0JBQVgsQ0FBbkI7QUFDRCxPQUZNLE1BRUEsSUFBSUgsYUFBWUEsVUFBUyxZQUFULENBQVosSUFBc0NBLFVBQVMsWUFBVCxNQUEyQixLQUFyRSxFQUE0RTtBQUNqRixhQUFLRixPQUFMLENBQWFDLEtBQWIsQ0FBbUJDLFVBQVMsa0JBQVQsQ0FBbkI7QUFDRCxPQUZNLE1BRUEsSUFBSUEsYUFBWUEsVUFBUyxRQUFULENBQVosSUFBa0NBLFVBQVMsUUFBVCxNQUF1QixHQUE3RCxFQUFrRTtBQUN2RSxhQUFLRixPQUFMLENBQWFDLEtBQWIsQ0FBbUJDLFVBQVMsZ0JBQVQsQ0FBbkI7QUFDRDtBQUNGOzs7MEJBRUtELEssRUFBT0MsUSxFQUFVO0FBQ3JCLFdBQUtGLE9BQUwsQ0FBYU0sUUFBYixDQUFzQixnQ0FBdEI7QUFDQSxXQUFLTixPQUFMLENBQWFNLFFBQWIsQ0FBc0JMLEtBQXRCO0FBQ0EsV0FBS0QsT0FBTCxDQUFhTSxRQUFiLENBQXNCLG1DQUF0QjtBQUNBLFdBQUtOLE9BQUwsQ0FBYU0sUUFBYixDQUFzQkosUUFBdEI7QUFDQSxXQUFLRixPQUFMLENBQWFNLFFBQWIsQ0FBc0IsMEJBQXRCO0FBQ0Q7Ozs7OztrQkFHWVAsUyIsImZpbGUiOiJ2YWxpZGF0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBWYWxpZGF0b3Ige1xuICBjb25zdHJ1Y3RvcihlbWl0dGVyKSB7XG4gICAgdGhpcy5lbWl0dGVyID0gZW1pdHRlcjtcbiAgfVxuXG4gIHJlc3BvbnNlKGVycm9yLCByZXNwb25zZSkge1xuICAgIHRoaXMuZGVidWcoZXJyb3IsIHJlc3BvbnNlKTtcblxuICAgIGlmIChlcnJvciAmJiBlcnJvci5tZXNzYWdlKSB7XG4gICAgICB0aGlzLmVtaXR0ZXIuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfSBlbHNlIGlmIChlcnJvciAmJiBlcnJvci5ib2R5ICYmIGVycm9yLmJvZHlbJ2Vycm9yLWNvZGUnXSkge1xuICAgICAgdGhpcy5lbWl0dGVyLmVycm9yKGVycm9yLmJvZHlbJ2Vycm9yLWNvZGUtbGFiZWwnXSk7XG4gICAgfSBlbHNlIGlmIChyZXNwb25zZSAmJiByZXNwb25zZVsnZXJyb3ItY29kZSddICYmIHJlc3BvbnNlWydlcnJvci1jb2RlJ10gIT09ICcyMDAnKSB7XG4gICAgICB0aGlzLmVtaXR0ZXIuZXJyb3IocmVzcG9uc2VbJ2Vycm9yLWNvZGUtbGFiZWwnXSk7XG4gICAgfSBlbHNlIGlmIChyZXNwb25zZSAmJiByZXNwb25zZVsnc3RhdHVzJ10gJiYgcmVzcG9uc2VbJ3N0YXR1cyddICE9PSAnMCcpIHtcbiAgICAgIHRoaXMuZW1pdHRlci5lcnJvcihyZXNwb25zZVsnc3RhdHVzX21lc3NhZ2UnXSk7XG4gICAgfVxuICB9XG5cbiAgZGVidWcoZXJyb3IsIHJlc3BvbnNlKSB7XG4gICAgdGhpcy5lbWl0dGVyLmRlYnVnZ2VyKCdWYWxpZGF0b3IucmVzcG9uc2UoKSAtIEVycm9yOiAnKTtcbiAgICB0aGlzLmVtaXR0ZXIuZGVidWdnZXIoZXJyb3IpO1xuICAgIHRoaXMuZW1pdHRlci5kZWJ1Z2dlcignVmFsaWRhdG9yLnJlc3BvbnNlKCkgLSBSZXNwb25zZTogJyk7XG4gICAgdGhpcy5lbWl0dGVyLmRlYnVnZ2VyKHJlc3BvbnNlKTtcbiAgICB0aGlzLmVtaXR0ZXIuZGVidWdnZXIoJ0VuZCBWYWxpZGF0b3IucmVzcG9uc2UoKScpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZhbGlkYXRvcjtcbiJdfQ==